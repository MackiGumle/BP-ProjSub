// <auto-generated />
using System;
using BP_ProjSub.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BP_ProjSub.Server.Migrations
{
    [DbContext(typeof(BakalarkaDbContext))]
    partial class BakalarkaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BP_ProjSub.Server.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("MaxPoints")
                        .HasColumnType("bigint");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("Subject_Id");

                    b.Property<int>("TeacherPersonId")
                        .HasColumnType("int")
                        .HasColumnName("Teacher_Person_Id");

                    b.Property<string>("Title")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Type")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("Assignment_PK");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherPersonId");

                    b.ToTable("Assignment", (string)null);
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .IsUnicode(false)
                        .HasColumnType("varchar(254)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Surname")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("Person_PK");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Rating", b =>
                {
                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("Rating1")
                        .HasColumnType("numeric(28, 0)")
                        .HasColumnName("Rating");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int")
                        .HasColumnName("Submission_Id");

                    b.Property<int>("TeacherPersonId")
                        .HasColumnType("int")
                        .HasColumnName("Teacher_Person_Id");

                    b.HasKey("Time")
                        .HasName("Rating_PK");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("TeacherPersonId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Student", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("Person_Id");

                    b.Property<string>("Faculty")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("StudyForm")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Study_form");

                    b.Property<string>("StudyType")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Study_type");

                    b.HasKey("PersonId")
                        .HasName("Student_PK");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Language")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id")
                        .HasName("Subject_PK");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("Assignment_Id");

                    b.Property<byte[]>("FileData")
                        .HasMaxLength(1)
                        .HasColumnType("varbinary(1)");

                    b.Property<string>("FileName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("StudentPersonId")
                        .HasColumnType("int")
                        .HasColumnName("Student_Person_Id");

                    b.Property<DateTime?>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("Submission_PK");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentPersonId");

                    b.ToTable("Submission", (string)null);
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Teacher", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("Person_Id");

                    b.Property<string>("Office")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("PersonId")
                        .HasName("Teacher_PK");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("SubjectStudent", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("Subject_Id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("Student_Id");

                    b.HasKey("SubjectId", "StudentId")
                        .HasName("Relation_13_PK");

                    b.HasIndex("StudentId");

                    b.ToTable("SubjectStudent", (string)null);
                });

            modelBuilder.Entity("Teach", b =>
                {
                    b.Property<int>("TeacherPersonId")
                        .HasColumnType("int")
                        .HasColumnName("Teacher_Person_Id");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("Subject_Id");

                    b.HasKey("TeacherPersonId", "SubjectId")
                        .HasName("Relation_6_PK");

                    b.HasIndex("SubjectId");

                    b.ToTable("Teaches", (string)null);
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Assignment", b =>
                {
                    b.HasOne("BP_ProjSub.Server.Models.Subject", "Subject")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("Assignment_Subject_FK");

                    b.HasOne("BP_ProjSub.Server.Models.Teacher", "TeacherPerson")
                        .WithMany("Assignments")
                        .HasForeignKey("TeacherPersonId")
                        .IsRequired()
                        .HasConstraintName("Assignment_Teacher_FK");

                    b.Navigation("Subject");

                    b.Navigation("TeacherPerson");
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Rating", b =>
                {
                    b.HasOne("BP_ProjSub.Server.Models.Submission", "Submission")
                        .WithMany("Ratings")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("Rating_Submission_FK");

                    b.HasOne("BP_ProjSub.Server.Models.Teacher", "TeacherPerson")
                        .WithMany("Ratings")
                        .HasForeignKey("TeacherPersonId")
                        .IsRequired()
                        .HasConstraintName("Rating_Teacher_FK");

                    b.Navigation("Submission");

                    b.Navigation("TeacherPerson");
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Student", b =>
                {
                    b.HasOne("BP_ProjSub.Server.Models.Person", "Person")
                        .WithOne("Student")
                        .HasForeignKey("BP_ProjSub.Server.Models.Student", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Student_Person_FK");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Submission", b =>
                {
                    b.HasOne("BP_ProjSub.Server.Models.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .IsRequired()
                        .HasConstraintName("Submission_Assignment_FK");

                    b.HasOne("BP_ProjSub.Server.Models.Student", "StudentPerson")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentPersonId")
                        .IsRequired()
                        .HasConstraintName("Submission_Student_FK");

                    b.Navigation("Assignment");

                    b.Navigation("StudentPerson");
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Teacher", b =>
                {
                    b.HasOne("BP_ProjSub.Server.Models.Person", "Person")
                        .WithOne("Teacher")
                        .HasForeignKey("BP_ProjSub.Server.Models.Teacher", "PersonId")
                        .IsRequired()
                        .HasConstraintName("Teacher_Person_FK");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SubjectStudent", b =>
                {
                    b.HasOne("BP_ProjSub.Server.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("Relation_13_Student_FK");

                    b.HasOne("BP_ProjSub.Server.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("Relation_13_Subject_FK");
                });

            modelBuilder.Entity("Teach", b =>
                {
                    b.HasOne("BP_ProjSub.Server.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("Relation_6_Subject_FK");

                    b.HasOne("BP_ProjSub.Server.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherPersonId")
                        .IsRequired()
                        .HasConstraintName("Relation_6_Teacher_FK");
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Person", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Student", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Subject", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Submission", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("BP_ProjSub.Server.Models.Teacher", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
